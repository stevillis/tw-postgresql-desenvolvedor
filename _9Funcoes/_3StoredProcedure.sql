CREATE SCHEMA comunicacao;

CREATE TABLE comunicacao.CEM_CREATE_EMAIL_MARKETING
(
	CEM_ID SERIAL PRIMARY KEY,
	CEM_NOME VARCHAR(50) NOT NULL,
	CEM_TOTAL_GASTO MONEY NOT NULL,
	CEM_PORCENTAGEM_DESCONTO DECIMAL(4, 1) NOT NULL
);

CREATE OR REPLACE FUNCTION comunicacao.FN_CARGA_EMAIL_MARKETING()
RETURNS VOID AS
$$
DECLARE
	CR_CLIENTES CURSOR FOR 
		SELECT CLI_NOME,
			VALOR_TOTAL_GASTO
		FROM financeiro.FN_RELATORIO_GASTOS_CLIENTES(5::MONEY);
	V_NOME_CLIENTE VARCHAR(50);
	V_VALOR_GASTO MONEY;
	V_PORCENTAGEM_DESCONTO DECIMAL(4, 1);
BEGIN
	OPEN CR_CLIENTES;
		LOOP
			FETCH FROM CR_CLIENTES INTO V_NOME_CLIENTE, V_VALOR_GASTO;
			EXIT WHEN NOT FOUND;
			IF V_VALOR_GASTO <= 20::MONEY THEN
				V_PORCENTAGEM_DESCONTO := 15.5;
			ELSIF V_VALOR_GASTO > 20::MONEY AND V_VALOR_GASTO <= 50::MONEY THEN
				V_PORCENTAGEM_DESCONTO := 25;
			ELSE
				V_PORCENTAGEM_DESCONTO := 35;
			END IF;
			
			INSERT INTO comunicacao.CEM_CREATE_EMAIL_MARKETING
			(CEM_NOME, CEM_TOTAL_GASTO, CEM_PORCENTAGEM_DESCONTO)
			VALUES
			(V_NOME_CLIENTE, V_VALOR_GASTO, V_PORCENTAGEM_DESCONTO);
		END LOOP;
	CLOSE CR_CLIENTES;
END;
$$
LANGUAGE plpgsql
VOLATILE;

DO LANGUAGE plpgsql
$$
BEGIN
	PERFORM comunicacao.FN_CARGA_EMAIL_MARKETING();
END;
$$

SELECT *
FROM comunicacao.CEM_CREATE_EMAIL_MARKETING;